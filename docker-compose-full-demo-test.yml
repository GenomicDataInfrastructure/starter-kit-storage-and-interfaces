services:
  credentials:
    container_name: credentials
    command:
      - "/bin/sh"
      - "/scripts/make_credentials.sh"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - PGPASSWORD=${credentials_PGPASSWORD}
    image: python:3.10-slim
    networks:
      - secure
    volumes:
      - ./scripts:/scripts
      - shared:/shared
      - cacert:/cacert

  data_loader:
    container_name: data_loader
    command:
      - "/bin/sh"
      - "/load_data.sh"
    depends_on:
      s3inbox:
        condition: service_started
    image: python:3.10-alpine
    networks:
      - secure
    volumes:
      - ./scripts/load_data.sh:/load_data.sh
      - shared:/shared
      - cacert:/cacert

  ### OIDC (LS-AAI in  a box)
  oidc:
    command:
      - /bin/sh
      - -c
      - |
        pip install --upgrade pip
        pip install aiohttp Authlib joserfc requests
        python -u /oidc.py
    container_name: oidc
    depends_on:
      credentials:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "python3", "-c", 'import requests; print(requests.get(url = "https://localhost:8080/jwk", verify="/shared/cert/ca.crt").text)']
      interval: 5s
      timeout: 10s
      retries: 20
    image: python:3.10-slim
    networks:
      - public
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - ./servers/oidc.py:/oidc.py
      - shared:/shared
  ###

  rabbitmq:
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_PASS=${rabbitmq_MQ_PASSWORD}
      - RABBITMQ_DEFAULT_USER=${rabbitmq_MQ_USER}
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
        ]
      interval: 5s
      timeout: 20s
      retries: 20
    image: ghcr.io/neicnordic/sensitive-data-archive:v0.2.94-rabbitmq
    networks:
      - secure
    ports:
      - 15672:15672
    restart: always

  reencrypt:
    image: ghcr.io/neicnordic/sensitive-data-archive:v0.3.7
    command: [ sda-reencrypt ]
    container_name: reencrypt
    depends_on:
      credentials:
        condition: service_completed_successfully
    ports:
      - "50051:50051"
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml
      - shared:/shared

  postgres:
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=${postgres_POSTGRES_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-h",
          "localhost",
          "-U",
          "postgres"
        ]
      interval: 5s
      timeout: 20s
      retries: 20
    image: ghcr.io/neicnordic/sensitive-data-archive:v0.2.94-postgres
    networks:
      - secure
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data

  s3:
    command: server /data  --console-address ":9001"
    container_name: s3
    environment:
      - MINIO_ROOT_USER=${s3_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${s3_MINIO_ROOT_PASSWORD}
      - MINIO_SERVER_URL=${s3_MINIO_SERVER_URL}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-fq",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 5s
      timeout: 20s
      retries: 3
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    networks:
      - secure
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: always
    volumes:
      - s3data:/data

  ## data ingest pipeline
  download:
    command: sda-download
    container_name: download
    depends_on:
      credentials:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      s3:
        condition: service_healthy
      oidc:
        condition: service_healthy
    environment:
      - DB_PASSWORD=${download_DB_PASSWORD}
      - DB_USER=${download_DB_USER}
      - OIDC_CONFIGURATION_URL=https://oidc:8080/.well-known/openid-configuration
    extra_hosts:
      - ${DOCKERHOST:-dockerhost}:host-gateway
    # image: harbor.nbis.se/gdi/sda-download:htsget-crypt4gh
    # image: htsget-crypt4gh-range
    image: local-sda-download
    networks:
      - public
      - secure
    ports:
      - 8443:8443
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml
      - ${ISS_FILEPATH}:/iss.json
      - shared:/shared

  finalize:
    command: sda-finalize
    container_name: finalize
    depends_on:
      credentials:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_healthy
    environment:
      - BROKER_PASSWORD=${finalize_BROKER_PASSWORD}
      - BROKER_QUEUE=${finalize_BROKER_QUEUE}
      - BROKER_ROUTINGKEY=${finalize_BROKER_ROUTINGKEY}
      - BROKER_USER=${finalize_BROKER_USER}
      - DB_PASSWORD=${finalize_DB_PASSWORD}
      - DB_USER=${finalize_DB_USER}
    image: harbor.nbis.se/gdi/storage:htsget-crypt4gh 
    networks:
      - secure
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml

  ingest:
    command: sda-ingest
    container_name: ingest
    depends_on:
      credentials:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_healthy
    environment:
      - BROKER_PASSWORD=${ingest_BROKER_PASSWORD}
      - BROKER_QUEUE=${ingest_BROKER_QUEUE}
      - BROKER_ROUTINGKEY=${ingest_BROKER_ROUTINGKEY}
      - BROKER_USER=${ingest_BROKER_USER}
      - DB_PASSWORD=${ingest_DB_PASSWORD}
      - DB_USER=${ingest_DB_USER}
    image: harbor.nbis.se/gdi/storage:htsget-crypt4gh 
    networks:
      - secure
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml
      - shared:/shared

  mapper:
    command: sda-mapper
    container_name: mapper
    depends_on:
      credentials:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_healthy
    environment:
      - BROKER_PASSWORD=${mapper_BROKER_PASSWORD}
      - BROKER_QUEUE=${mapper_BROKER_QUEUE}
      - BROKER_USER=${mapper_BROKER_USER}
      - DB_PASSWORD=${mapper_DB_PASSWORD}
      - DB_USER=${mapper_DB_USER}
    image: harbor.nbis.se/gdi/storage:htsget-crypt4gh 
    networks:
      - secure
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml

  verify:
    command: sda-verify
    container_name: verify
    depends_on:
      credentials:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_healthy
    environment:
      - BROKER_PASSWORD=${verify_BROKER_PASSWORD}
      - BROKER_QUEUE=${verify_BROKER_QUEUE}
      - BROKER_ROUTINGKEY=${verify_BROKER_ROUTINGKEY}
      - BROKER_USER=${verify_BROKER_USER}
      - DB_PASSWORD=${verify_DB_PASSWORD}
      - DB_USER=${verify_DB_USER}
    image: harbor.nbis.se/gdi/storage:htsget-crypt4gh 
    networks:
      - secure
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml
      - shared:/shared
  s3inbox:
    command: sda-s3inbox
    container_name: s3inbox
    depends_on:
      credentials:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      s3:
        condition: service_healthy
    environment:
      - BROKER_PASSWORD=${s3inbox_BROKER_PASSWORD}
      - BROKER_ROUTINGKEY=${s3inbox_BROKER_ROUTINGKEY}
      - BROKER_USER=${s3inbox_BROKER_USER}
      - DB_PASSWORD=${s3inbox_DB_PASSWORD}
      - DB_USER=${s3inbox_DB_USER}
      - SERVER_JWTPUBKEYURL=https://oidc:8080/jwk
    extra_hosts:
      - ${DOCKERHOST:-dockerhost}:host-gateway
    image: harbor.nbis.se/gdi/storage:htsget-crypt4gh 
    networks:
      - public
      - secure
    ports:
      - "8000:8000"
    restart: always
    volumes:
      - ${CONFIG_FILEPATH}:/config.yaml
      - shared:/shared
      - cacert:/etc/ssl/certs/

volumes:
  cacert:
  pgdata:
  shared:
  s3data:

networks:
  public:
  secure:
  my-app-network:
    name: my-app-network
